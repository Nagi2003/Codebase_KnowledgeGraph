==>  To visualize all nodes and relationships
MATCH (n)-[r]->(m)  
RETURN n, r, m;

1. Basic Queries
==>  Retrieve all files in the repository
MATCH (f:File) RETURN f.name;

==>  Retrieve all classes in a specific file
MATCH (c:Class)-[:BELONGS_TO]->(f:File {name: "your_file.py"})  
RETURN c.name;

==>  Retrieve all functions in a specific file
MATCH (fn:Function)-[:BELONGS_TO]->(f:File {name: "your_file.py"})  
RETURN fn.name;

==>  Retrieve all variables in a specific file
MATCH (v:Variable)-[:BELONGS_TO]->(f:File {name: "your_file.py"})  
RETURN v.name;

2. Code Structure Queries
==>  Find all functions inside a class
MATCH (fn:Function)-[:BELONGS_TO]->(c:Class {name: "YourClassName"})  
RETURN fn.name;

==>  Find all classes that extend another class
MATCH (c1:Class)-[:EXTENDS]->(c2:Class)  
RETURN c1.name AS ChildClass, c2.name AS ParentClass;

==>  Find all functions that call another function
MATCH (f1:Function)-[:CALLS]->(f2:Function)  
RETURN f1.name AS Caller, f2.name AS Callee;

==>  Find all variables used in a function
MATCH (fn:Function)-[:HAS_PARAMETER]->(v:Variable)  
RETURN fn.name AS Function, v.name AS Variable;

3. Dependency & Import Queries
==>  Find all modules imported in a file
MATCH (f:File {name: "your_file.py"})-[:IMPORTS]->(m:Module)  
RETURN m.name;

==>  Find all files that import a specific module
MATCH (f:File)-[:IMPORTS]->(m:Module {name: "some_module"})  
RETURN f.name;

==>  Find all dependencies of a class or function
MATCH (n)-[:DEPENDS_ON]->(m)  
RETURN n.name AS Dependent, m.name AS Dependency;


4. Relationships & Interaction Queries

==>  Find which functions use a specific decorator
MATCH (d:Decorator {name: "your_decorator"})-[:DECORATES]->(fn:Function)  
RETURN fn.name;

==>  Find all exception handlers in a project
MATCH (e:Exception)  
RETURN e.name, e.line_number;

==>  Find which functions raise exceptions
MATCH (fn:Function)-[:RAISES]->(e:Exception)  
RETURN fn.name AS Function, e.name AS Exception;

5. File Interaction Queries
==>  Find which files read/write from/to a data file
MATCH (f:File)-[:READS_FROM]->(df:DataFile)  
RETURN f.name AS ReaderFile, df.name AS DataFile;

MATCH (f:File)-[:WRITES_TO]->(df:DataFile)  
RETURN f.name AS WriterFile, df.name AS DataFile;

==>  Find scripts that execute specific functions
MATCH (s:Script)-[:EXECUTES]->(fn:Function)  
RETURN s.name AS Script, fn.name AS Function;

==>  Find API endpoints that trigger functions
MATCH (ep:APIEndpoint)-[:LISTENS_TO]->(fn:Function)  
RETURN ep.name AS API, fn.name AS Function;